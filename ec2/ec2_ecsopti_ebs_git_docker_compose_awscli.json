{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template of Ec2 ecs optimized Amazon Linux  with git, aws cli and docker-compose and s3-fs",
    "Metadata": {
      "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
          {
            "Label": {
              "default": "Network Configuration"
            },
            "Parameters": ["VpcStackId", "SubnetId", "AvailabilityZone", "SSHLocation", "HTTPSLocation", "AppPort", "AppPortLocation"]
          },
          {
            "Label": {
              "default": "Amazon EC2 Configuration"
            },
            "Parameters": ["InstanceType", "KeyPair", "Domain", "VolumeSize", "VolumeType"]
          }
        ],
        "ParameterLabels": {
          "VpcStackId": {
            "default": "Which VPC should this be deployed to?"
          }
        }
      }
    },
    "Parameters": {
        "KeyPair": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Key pair name",
            "Default": "general"
        },
        "VpcStackId": {
            "Description": "Id of desired VPC",
            "Type": "AWS::EC2::VPC::Id",
            "Default": "vpc-13767f7b"
        },
        "AvailabilityZone": {
            "Description": "AvailabilityZone of Stack",
            "Type": "AWS::EC2::AvailabilityZone::Name",
            "Default": "eu-central-1c"
        },

        "SubnetId": {
            "Description": "Id of the subnet",
            "Type": "AWS::EC2::Subnet::Id",
            "Default": "subnet-c4e62d89"
        },
        "Domain": {
            "Type": "String",
            "Description": "Route53 Domain that serves as HostedZone for Route53. Provide a valid domain name using only lowercase letters",
            "Default": "aws.funkedigital.de"
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "UnhappyDummy Data Volume size  mounted on /opt in Gb",
            "Default": "100"
        },
        "VolumeType": {
            "Type": "String",
            "Description": "UnhappyDummy /opt Data Volume type. Can be gp2 for General Purpose SSD, io1 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic volumes.",
            "AllowedValues": ["gp2", "st1", "sc1", "standard"],
            "Default": "gp2"
        },
        "SSHLocation": {
          "Description": "The IP address range that can be used to SSH to the EC2 instances",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "Default": "0.0.0.0/0",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "HTTPSLocation": {
          "Description": "The IP address range that can be used to use http AND https to the EC2 instances",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "Default": "0.0.0.0/0",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "AppPortLocation": {
          "Description": "The IP address range that can be used to use The Application port",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "Default": "10.0.0.0/8",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "AppPort": {
          "Description": "The Application port that can be opened for a range of IPs - AppPortLocation",
          "Default": "8080",
          "Type": "Number",
          "MinValue": "1",
          "MaxValue": "65535"
        },
        "InstanceType": {
            "Type": "String",
            "Description": "Choose Instance type",
            "AllowedValues": ["t2.nano", "t3.nano", "t2.micro", "t3.micro", "t2.small", "t3.small", "t2.medium", "t3.medium", "t2.large", "t3.large", "r5.large", "m4.large", "m5.large", "c5.large"],
            "Default": "t3.small"
        }
    },
    "Mappings": {
        "AmazonLinuxAmi": {
            "us-east-1": {
                "Ami": "ami-07eb698ce660402d2"
            },
            "us-east-2": {
                "Ami": "ami-0a0c6574ce16ce87a"
            },
            "us-west-1": {
                "Ami": "ami-04c22ba97a0c063c4"
            },
            "us-west-2": {
                "Ami": "ami-09568291a9d6c804c"
            },
            "eu-west-2": {
                "Ami": "ami-0cb31bf24b130a0f9"
            },
            "eu-central-1": {
                "Ami": "ami-0b9fee3a2d0596ed1"
            },
            "eu-west-1": {
                "Ami": "ami-066826c6a40879d75"
            }
        }
    },
    "Resources": {
        "RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneName": {
                    "Fn::Sub": "${Domain}."
                },
                "Name": {
                    "Fn::Sub": "${AWS::StackName}.${Domain}."
                },
                "Type": "A",
                "TTL": "60",
                "ResourceRecords": [{"Ref": "EIPAddress"}]
            }
        },
        "S3Bucket": {
           "Type" : "AWS::S3::Bucket",
           "Properties": {
              "BucketName": {
                 "Fn::Sub": "${AWS::AccountId}-${AWS::StackName}-s3"
              }
           }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "UnhappyDummy_sg",
                "VpcId": {
                    "Fn::Sub": "${VpcStackId}"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": { "Ref" : "SSHLocation"}
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 80,
                    "ToPort": 80,
                    "CidrIp": { "Ref" : "HTTPSLocation"}
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": { "Ref" : "AppPort"},
                    "ToPort": { "Ref" : "AppPort"},
                    "CidrIp": { "Ref" : "AppPortLocation"}
                }, {
                    "IpProtocol": "tcp",
                    "FromPort": 443,
                    "ToPort": 443,
                    "CidrIp": { "Ref" : "HTTPSLocation"}
                }],
                "Tags": [{
                    "Key": "name",
                    "Value": {
                        "Fn::Join": [
                            "-", [{
                                    "Ref": "AWS::StackName"
                                },
                                "UnhappyDummy"
                            ]
                        ]
                    }
                }, {
                    "Key": "maintainer",
                    "Value": "devops"
                }]
            }
        },
        "DataVolume": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "Size": {
                    "Ref": "VolumeSize"
                },
                "VolumeType": {
                    "Ref": "VolumeType"
                },
                "AvailabilityZone": {
                    "Fn::Sub": "${AvailabilityZone}"
                },
                "Tags": [{
                    "Key": "Backup",
                    "Value": "true"
                }, {
                    "Key": "maintainer",
                    "Value": "devops"
                }, {
                    "Key": "Name",
                    "Value": {
                        "Fn::Sub": "${AWS::StackName}-data"
                    }
                }]
            },
            "DeletionPolicy": "Snapshot"
        },
        "Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AmazonLinuxAmi", {
                            "Ref": "AWS::Region"
                        },
                        "Ami"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "AvailabilityZone": {
                    "Fn::Sub": "${AvailabilityZone}"
                },
                "IamInstanceProfile": {
                    "Ref": "UnhappyDummyInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyPair"
                },
                "NetworkInterfaces": [{
                    "DeviceIndex": "0",
                    "SubnetId": {
                        "Fn::Sub": "${SubnetId}"
                    },
                    "GroupSet": [{
                        "Ref": "SecurityGroup"
                    }]
                }],
                "Volumes": [{
                    "VolumeId": {
                        "Ref": "DataVolume"
                    },
                    "Device": "/dev/sdk"
                }],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", [
                                "#!/bin/bash -xe\n",
                                "exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1\n",
                                "echo 'Adding new dev/xvdk volume, creating fs, editing fstab'\n",
                                "userName=`whoami`\n",
                                "echo $userName\n",
                                "if ! blkid /dev/xvdk; then mkfs -t ext4 /dev/xvdk && echo \"/dev/xvdk /opt ext4 defaults,nofail 0 2\" >> /etc/fstab; fi\n",
                                "echo 'If instance type is new and the hypervisor is HVM, adding new dev/sdk volume, creating fs, editing fstab'\n",
                                "if ! blkid /dev/sdk; then mkfs -t ext4 /dev/sdk && echo \"/dev/sdk /opt ext4 defaults,nofail 0 2\" >> /etc/fstab; fi\n",
                                "sudo mount -a\n",
                                "sudo yum update -y\n",
                                "sudo yum install -y epel-release\n",
                                "sudo sed -i 's/enabled=0/enabled=1/' /etc/yum.repos.d/epel.repo\n",
                                "sudo yum install -y git gcc libstdc++-devel gcc-c++ fuse fuse-devel curl-devel libxml2-devel mailcap automake openssl-devel\n",
                                "sudo mkdir -p /opt/", { "Ref": "AWS::StackName" }, "\n",
                                "sudo mkdir -p /opt/certbot\n",
                                "sudo chown ec2-user:ec2-user /opt/", { "Ref": "AWS::StackName" }, "\n",
                                "sudo chown ec2-user:ec2-user /opt/certbot\n",
                                "git clone https://github.com/certbot/certbot.git /opt/certbot\n",
                                "sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64 -o /usr/local/bin/docker-compose\n",
                                "sudo chmod +x /usr/local/bin/docker-compose\n",
                                "echo 'Installing docker-compose - done'\n",
                                "echo 'Downloading PIP and installing awscli'\n",
                                "runuser -l ec2-user -c 'curl -O https://bootstrap.pypa.io/get-pip.py'\n",
                                "echo 'Executing PIP using Python'\n",
                                "runuser -l ec2-user -c 'python get-pip.py --user'\n",
                                "runuser -l ec2-user -c 'pip install awscli --upgrade --user'\n",
                                "runuser -l ec2-user -c 'export PATH=/home/ec2-user/.local/bin:$PATH'\n",
                                "echo 'Installing AWS CLI - done'\n",
                                "echo 'Installing s3fs-fuse'\n",
                                "sudo mkdir -p /opt/s3\n",
                                "sudo mkdir -p /opt/s3fs-fuse\n",
                                "sudo chown ec2-user:ec2-user /opt/s3fs-fuse\n",
                                "git clone https://github.com/s3fs-fuse/s3fs-fuse /opt/s3fs-fuse\n",
                                "cd /opt/s3fs-fuse\n",
                                "/opt/s3fs-fuse/autogen.sh\n",
                                "/opt/s3fs-fuse/configure --prefix=/usr --with-openssl\n",
                                "make\n",
                                "sudo make install\n",
                                "echo 'Installing s3fs-fuse  - done'\n",
                                "echo 'mounting s3fs-fuse'\n",
                                "echo 's3fs#", { "Ref": "S3Bucket" }, " /opt/s3 fuse _netdev,allow_other,uid='`id -u ec2-user`',iam_role=", { "Ref" : "UnhappyDummyRole" }, ",use_cache=/tmp/s3fs/cache,url=https://s3-", { "Ref": "AWS::Region" }, ".amazonaws.com/  0 0' >> /etc/fstab\n",
                                "sudo mount -a\n"
                            ]
                        ]
                    }
                },
                "Tags": [{
                    "Key": "maintainer",
                    "Value": "devops"
                }, {
                    "Key": "Name",
                    "Value": {
                        "Fn::Sub": "${AWS::StackName}"
                    }
                }]
            }
        },
        "EIPAddress": {
            "Type": "AWS::EC2::EIP"
        },
        "EIPAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "InstanceId": {"Ref": "Instance"},
                "EIP": {"Ref": "EIPAddress"}
            }
        },
        "UnhappyDummyRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/",
                "RoleName": {
                    "Fn::Sub": "${AWS::Region}-${AWS::StackName}-Role"
                }
            }
        },
        "UnhappyDummyRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "UnhappyDummyRolePolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": "ec2:Describe*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetRepositoryPolicy",
                                "ecr:DescribeRepositories",
                                "ecr:ListImages",
                                "ecr:DescribeImages",
                                "ecr:BatchGetImage"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:*"
                            ],
                            "Resource": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "arn:aws:s3:::",
                                      {
                                          "Ref": "S3Bucket"
                                      },
                                      "/*"
                                  ]
                              ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:*"
                            ],
                            "Resource": {
                              "Fn::Join": [
                                  "",
                                  [
                                      "arn:aws:s3:::",
                                      {
                                          "Ref": "S3Bucket"
                                      },
                                      ""
                                  ]
                              ]
                            }
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "UnhappyDummyRole"
                }]
            }
        },
        "UnhappyDummyInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{
                    "Ref": "UnhappyDummyRole"
                }],
                "InstanceProfileName": {
                    "Fn::Sub": "${AWS::StackName}-InstanceProfile"
                }
            }
        }
    }
}
